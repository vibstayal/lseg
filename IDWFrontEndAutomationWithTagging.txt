{
    "AWSTemplateFormatVersion": "2010-09-09",
	"Metadata" : {
  "AWS::CloudFormation::Interface" : {
    "ParameterGroups" : [
	  {
        "Label" : { "default" : "Global Name" },
        "Parameters" : [ "EnvironmentType" ]
      },
      {
        "Label" : { "default" : "API Gateway Configuration" },
        "Parameters" : [ "IDWApiName", "IDWApiResourceName1","HttpMethod1","IDWApiResourceName2","HttpMethod2","IDWApiResourceName3","HttpMethod3","IDWApiStageName"]
      },
      {
        "Label" : { "default":"Lambda Configuration" },
        "Parameters" : [ "LambdaFunctionName" , "LambdaCodeBucketName" ,"LambdaZipFileName" , "VPC", "LambdaSubnetIds"]
      }
    ]
     }
},
    "Description": "IDW Front End with APIGateway,Lambda",

	"Parameters" : {
	"EnvironmentType": {
      "Description": "The environment type",
      "Type": "String",
      "Default": "SIT",
      "AllowedValues" : [ "DEV", "SIT", "PREPROD", "PROD"],
      "ConstraintDescription": "Select Environment type from Drop-down."
    },
	"IDWApiStageName": {
      "Description": "The API Deployable Stage Name",
      "Type": "String",
      "Default": "v01",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
    },
	"IDWApiName":{
	  "Description": "The IDW APIGateway Name",
      "Type": "String",
      "Default": "IDWStore",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"IDWApiResourceName1":{
	  "Description": "The IDWApiGateway Resource 1",
      "Type": "String",
      "Default": "holdings",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"HttpMethod1":{
	  "Description": "The IDWApiGateway Method 1",
      "Type": "String",
      "Default": "GET",
	  "AllowedValues" : [ "GET", "POST"]
	},
	"IDWApiResourceName2":{
	  "Description": "The IDWApiGateway Resource 2",
      "Type": "String",
      "Default": "indexvalues",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"HttpMethod2":{
	  "Description": "The IDWApiGateway Method 2",
      "Type": "String",
      "Default": "GET",
	  "AllowedValues" : [ "GET", "POST"]
	},
	"IDWApiResourceName3":{
	  "Description": "The IDWApiGateway Resource 3",
      "Type": "String",
      "Default": "returns",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"HttpMethod3":{
	  "Description": "The IDWApiGateway Method 3",
      "Type": "String",
      "Default": "GET",
	  "AllowedValues" : [ "GET", "POST"]
	},
	"LambdaFunctionName":{
	  "Description": "Lambda Function Name",
      "Type": "String",
      "Default": "idwstore_idwService"
	},
	"LambdaCodeBucketName":{
	  "Description": "Mention S3 Bucket Name(idw-prod-lambda) in which Lambda Code is there.",
      "Type": "String",
	  "ConstraintDescription" : "Must be a valid S3 Bucket Name."
	},
	"LambdaZipFileName":{
	  "Description": "Mention Lambda Zip File Name which is there in S3 Bucket. Ex. index.zip",
      "Type": "String",
	  "ConstraintDescription" : "Must be a valid Lambda File Name."
	},
	"LambdaSubnetIds":{
		"Description": "Select SubnetIds in which Lambda Function will reside.", 
		"Type" : "List<AWS::EC2::Subnet::Id>",
		"ConstraintDescription" : "Must select Subnet ID from drop-down."
	},
	"VPC": {
			"Description": "Select VPC in which Lambda and its Security Group will reside",
			"Type": "AWS::EC2::VPC::Id"
		}	
	},
    "Resources": {
        "IDWApiGatewayCloudWatchRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
				"RoleName" : {"Fn::Join" : ["-", ["IDW-APIGateway-CloudWatch-Role",{"Ref" : "EnvironmentType"}]]},
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                ]
            },
            "DependsOn": [
                "IDWApiMainStageLogGroup"
            ]
        },
        "IDWApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": [
                        "IDWApiGatewayCloudWatchRole",
                        "Arn"
                    ]
                }
            }
        },
        "IDWApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {"Fn::Join" : ["-", [{"Ref": "IDWApiName"},{"Ref" : "EnvironmentType"}]]},
                "Description": "An IDW REST API"
            }
        },
        "IDWApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "IDWApi"
                }	
            },
            "DependsOn": [
                "IDWApiMethod1","IDWApiMethod2","IDWApiMethod3"
            ]
        },
        "IDWApiMainStageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": [
                        "IDW-API-Gateway-Execution-Logs_IDW/${IDWApiStageName}",
                        {
                            "StageName": {
                                 "Ref" : "IDWApiStageName"
                            }
                        }
                    ]
                }
            }
        },
        "IDWApiStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "IDWApiDeployment"
                },
                "MethodSettings": [
                    {
                        "ResourcePath": "",
                        "HttpMethod": "*/*",
                        "DataTraceEnabled": true,
                        "LoggingLevel": "INFO",
                        "MetricsEnabled": false
                    }
                ],
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "StageName": {
                     "Ref" : "IDWApiStageName"
                }
            },
            "DependsOn": [
                "IDWApiMainStageLogGroup"
            ]
        },
         
        "IDWApiResource1": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "IDWApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": {"Ref": "IDWApiResourceName1"},
                "RestApiId": {
                    "Ref": "IDWApi"
                }
            }
        },
		 "IDWApiResource2": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "IDWApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": {"Ref": "IDWApiResourceName2"},
                "RestApiId": {
                    "Ref": "IDWApi"
                }
            }
        },
		 "IDWApiResource3": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "IDWApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": {"Ref": "IDWApiResourceName3"},
                "RestApiId": {
                    "Ref": "IDWApi"
                }
            }
        },
        "IDWLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "idwstore_idwService",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "IDWLambdaIAMFunctionRole",
                        "Arn"
                    ]
                },
				"FunctionName" : {"Fn::Join" : ["-", [{"Ref" : "LambdaFunctionName"},{"Ref" : "EnvironmentType"}]]},
                "Code": {
                    "S3Bucket" : {"Ref" : "LambdaCodeBucketName"},
					"S3Key" : {"Ref":"LambdaZipFileName"}
                },
				"VpcConfig" : { "SecurityGroupIds" : [{"Ref" : "LambdaSecurityGroup"}],"SubnetIds" : {"Ref":"LambdaSubnetIds"} },
                "Runtime": "nodejs6.10",
                "Timeout": "300",
				"Tags": [
			{"Key": "AWS Service","Value": "Lambda"}
        ]
            }
        },
		"LambdaSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"VpcId" : {
					"Ref" : "VPC"
				},
				"Tags": [
						{"Key": "AWS Service","Value": "Security Group"},{"Key": "Name","Value": {"Fn::Join" : ["-", ["IDWLambdaSecurityGroup",{"Ref" : "EnvironmentType"}]]}}
        ],
				"GroupDescription" : "Lambda SecurityGroup"
			}
		},
	 "InboundRule1LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "LambdaSecurityGroup"
        },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
       "SourceSecurityGroupId" : { "Ref" : "LambdaSecurityGroup" }

      }
     },
        "IDWLambdaIAMFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
				"RoleName" : {"Fn::Join" : ["-", ["IDW-Lambda-PROD-Role",{"Ref" : "EnvironmentType"}]]},
                "Path": "/"
            }
        },
        "IDWLambdaFunctionPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join" : ["-", ["IDWLambdaFunctionPolicy",{"Ref" : "EnvironmentType"}]]},
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
								"logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
								"logs:PutLogEvents",
								"ec2:CreateNetworkInterface",
								"ec2:DescribeNetworkInterfaces",
								"ec2:DeleteNetworkInterface"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IDWLambdaIAMFunctionRole"
                    }
                ]
            }
        },
        "IDWLambdaFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "/aws/lambda/${LambdaFunctionName}/${EnvironmentType}"
                }
            }
        },
		"IDWOPTIONS1": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
            "ResourceId": {
                "Ref": "IDWApiResource1"
            },
            "RestApiId": {
                "Ref": "IDWApi"
            },
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "Integration": {
                "Type": "MOCK",
                "IntegrationResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        },
                        "StatusCode": "200"
                    }
                ],
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                }
            },
            "MethodResponses": [
                {
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "StatusCode": "200"
                }
            ]
        }
    },
        "IDWApiMethod1": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "ResourceId": {
                    "Ref": "IDWApiResource1"
                },
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "HttpMethod": {"Ref" :"HttpMethod1"},
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "SelectionPattern": ""
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
					
	
  				
								"RequestTemplates": {
										"application/json" : "{\n   \"body\" : $input.json('$'),\n   \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n     \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n     #end\n    },\n    \"method\": \"$context.httpMethod\",\n   \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n     #end\n   },\n   \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n     #end\n   }\n }"
												},
                    "Type": "AWS",
                    "Uri": {
                         "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IDWLambdaFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    }
                ]
            },
            "DependsOn": [
                "IDWApiMethodLambdaPermission"
            ]
        },
		"IDWOPTIONS2": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
            "ResourceId": {
                "Ref": "IDWApiResource2"
            },
            "RestApiId": {
                "Ref": "IDWApi"
            },
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "Integration": {
                "Type": "MOCK",
                "IntegrationResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        },
                        "StatusCode": "200"
                    }
                ],
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                }
            },
            "MethodResponses": [
                {
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "StatusCode": "200"
                }
            ]
        }
    },
        "IDWApiMethod2": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "ResourceId": {
                    "Ref": "IDWApiResource2"
                },
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "HttpMethod": {
                    "Ref" :"HttpMethod2"
                },
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "SelectionPattern": ""
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
					
	
  				
								"RequestTemplates": {
										"application/json" : "{\n  \"body\" : $input.json('$'),\n   \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n     \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n     #end\n    },\n    \"method\": \"$context.httpMethod\",\n   \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n     #end\n   },\n   \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n     #end\n   }\n }"
												},
                    "Type": "AWS",
                    "Uri": {
                         "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IDWLambdaFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    }
                ]
            },
            "DependsOn": [
                "IDWApiMethodLambdaPermission"
            ]
        },
		"IDWOPTIONS3": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
            "ResourceId": {
                "Ref": "IDWApiResource3"
            },
            "RestApiId": {
                "Ref": "IDWApi"
            },
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "Integration": {
                "Type": "MOCK",
                "IntegrationResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        },
                        "StatusCode": "200"
                    }
                ],
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                }
            },
            "MethodResponses": [
                {
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "StatusCode": "200"
                }
            ]
        }
    },
        "IDWApiMethod3": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "ResourceId": {
                    "Ref": "IDWApiResource3"
                },
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "HttpMethod": {
                    "Ref" :"HttpMethod3"
                },
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "SelectionPattern": ""
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
					
	
  				
								"RequestTemplates": {
										"application/json" : "{\n  \"body\" : $input.json('$'),\n   \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n     \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n     #end\n    },\n    \"method\": \"$context.httpMethod\",\n   \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n     #end\n   },\n   \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n     #end\n   }\n }"
												},
                    "Type": "AWS",
                    "Uri": {
                         "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IDWLambdaFunction.Arn}/invocations"
                    }
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    }
                ]
            },
            "DependsOn": [
                "IDWApiMethodLambdaPermission"
            ]
        },	
        "IDWApiMethodLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "IDWLambdaFunction"
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Sub": [
                        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${IDWApi}/*/${IDWApiHttpMethod}/*",
                        {
                            "IDWApiHttpMethod": "GET"
                        }
                    ]
                }
            },
            "DependsOn": [
                "IDWLambdaFunctionLogGroup"
            ]
        }
    },
    "Outputs": {
        "IDWApiEndpoint1": {"Value": {"Fn::Sub": "https://${IDWApi}.execute-api.${AWS::Region}.amazonaws.com/${IDWApiStage}/holdings/"}},
		"IDWApiEndpoint2": {"Value": {"Fn::Sub": "https://${IDWApi}.execute-api.${AWS::Region}.amazonaws.com/${IDWApiStage}/indexvalues/"}},
		"IDWApiEndpoint3": {"Value": {"Fn::Sub": "https://${IDWApi}.execute-api.${AWS::Region}.amazonaws.com/${IDWApiStage}/returns/"}}
			}
      }