{
    "AWSTemplateFormatVersion": "2010-09-09",
	"Metadata" : {
  "AWS::CloudFormation::Interface" : {
    "ParameterGroups" : [
	  {
        "Label" : { "default" : "Global Name" },
        "Parameters" : [ "ApplicationName","EnvironmentType"]
      },
      {
        "Label" : { "default" : "API Gateway Configuration" },
        "Parameters" : [ "IDWApiName", "IDWApiResourceName1","HttpMethod1","IDWApiResourceName2","HttpMethod2","IDWApiResourceName3","HttpMethod3","IDWApiStageName"]
      },
      {
        "Label" : { "default":"Lambda Configuration" },
        "Parameters" : [ "LambdaFunctionName", "LambdaVPC", "LambdaSubnetIds"]
      },
	  {
		"Label" : { "default":"Ec2 Configuration" },
		"Parameters" : [ "Ec2VPC" ,"Ec2SubnetId" ,"InstanceTypeEc2" , "Ec2RDP" , "KeyName"]
	  }
    ]
     }
},
    "Description": "IDW Front End with APIGateway,Lambda",

	"Parameters" : {
	"ApplicationName": {
			"Description": "The Application Name",
			"Type": "String",
			"Default": "IDW",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters."
		},
	"EnvironmentType": {
      "Description": "The environment type",
      "Type": "String",
      "Default": "DEV",
      "AllowedValues" : [ "DEV", "SIT", "UAT", "PROD"],
      "ConstraintDescription": "Select Environment type from Drop-down."
    },
	"IDWApiStageName": {
      "Description": "The API Deployable Stage Name",
      "Type": "String",
      "Default": "v01",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
    },
	"IDWApiName":{
	  "Description": "The IDW APIGateway Name",
      "Type": "String",
      "Default": "IDWStore",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"IDWApiResourceName1":{
	  "Description": "The IDWApiGateway Resource 1",
      "Type": "String",
      "Default": "holdings",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"HttpMethod1":{
	  "Description": "The IDWApiGateway Method 1",
      "Type": "String",
      "Default": "GET",
	  "AllowedValues" : [ "GET", "POST"]
	},
	"IDWApiResourceName2":{
	  "Description": "The IDWApiGateway Resource 2",
      "Type": "String",
      "Default": "indexvalues",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"HttpMethod2":{
	  "Description": "The IDWApiGateway Method 2",
      "Type": "String",
      "Default": "GET",
	  "AllowedValues" : [ "GET", "POST"]
	},
	"IDWApiResourceName3":{
	  "Description": "The IDWApiGateway Resource 3",
      "Type": "String",
      "Default": "returns",
	  "AllowedPattern" : "[a-zA-Z0-9]*" 
	},
	"HttpMethod3":{
	  "Description": "The IDWApiGateway Method 3",
      "Type": "String",
      "Default": "GET",
	  "AllowedValues" : [ "GET", "POST"]
	},
	"LambdaFunctionName":{
	  "Description": "Lambda Function Name",
      "Type": "String",
      "Default": "idwstore_idwService"
	},
	"LambdaSubnetIds":{
		"Description": "Select SubnetIds in which Lambda Function will reside.", 
		"Type" : "List<AWS::EC2::Subnet::Id>",
		"ConstraintDescription" : "Must select Subnet ID from drop-down."
	},
	"LambdaVPC": {
			"Description": "Select VPC in which Lambda and its Security Group will reside",
			"Type": "AWS::EC2::VPC::Id"
		},
    "Ec2VPC": {
			"Description": "Select VPC in which IDW FrontEnd code will be deployed",
			"Type": "AWS::EC2::VPC::Id"
		},
    "Ec2SubnetId":{
		"Description": "Select SubnetId in which Ec2 will reside.", 
		"Type" : "AWS::EC2::Subnet::Id",
		"ConstraintDescription" : "Must select Subnet ID from drop-down."
	 },	
    "InstanceTypeEc2" : {
			"Description": "Select Type for Ec2",
			"Type" : "String",
			"Default" : "t2.micro",
			"AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
			"ConstraintDescription" : "Must be a valid EC2 instance type."
		},	 
	"KeyName" : {
			"Description": "Select Existing Key for Ec2 Instance",
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"Default" : "IDWKeyPair",
			"ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
		},
	"Ec2RDP": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "The IP address that can RDP to EC2 instance",
			"Default": "0.0.0.0/0",
            "Type": "String"
        }
	},
	"Mappings": {
			"AWSRegionArch2AMI": {
			
			"us-east-1": {
				"Windows2012r2": "ami-e196b0f7"
			},
			"us-west-2": {

				"Windows2012r2": "ami-3189ec51"
			},
			"us-west-1": {

				"Windows2012r2": "ami-b4614cd4"
			},
			"eu-west-1": {
				"Windows2012r2": "ami-96d4daf0"
			},
			"eu-west-2": {

				"Windows2012r2": "ami-07455263"
			},
			"eu-central-1": {
				"Windows2012r2": "ami-f9528c96"
			},
			"ap-northeast-1": {
				"Windows2012r2": "ami-539aa834"
			},
			"ap-northeast-2": {
				"Windows2012r2": "ami-50e13c3e"
			},
			"ap-southeast-1": {
				"Windows2012r2": "ami-9e3bbefd"
			},
			"ap-southeast-2": {
				"Windows2012r2": "ami-c4262ca7"
			},
			"ap-south-1": {
				"Windows2012r2": "ami-67047908"
			},
			"us-east-2": {
				"Windows2012r2": "ami-7fc4e31a"
			},
			"ca-central-1": {

				"Windows2012r2": "ami-687ec20c"
			},
			"sa-east-1": {
				"Windows2012r2": "ami-af6708c3"
			}
		}
	},
		
    "Resources": {
	
	"IDWFrontEndEc2" : {
			"Type" : "AWS::EC2::Instance",
			"Properties" : {
				"UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [ "Ec2IPAddress=", {"Ref" : "Ec2IPAddress"}]]}},
				"InstanceType" : { "Ref" : "InstanceTypeEc2" },
				"KeyName" : { "Ref" : "KeyName" },
				"DisableApiTermination" : "false",
				"ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },"Windows2012r2" ]},
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
				"<script>\n",
					"powershell.exe tzutil /s 'Pacific Standard Time' \n",
					"powershell.exe netsh advfirewall firewall add rule name='WinRM 5985' protocol=TCP dir=in localport=5985 action=allow \n",
				"</script>\n"
				]]}},
			"Tags": [
			{
				"Key": "Name",
				"Value": {"Fn::Join" : ["-", [{"Ref" : "ApplicationName"},{"Ref" : "EnvironmentType"},"UI"]]}
			},{"Key": "AWS Service","Value": "EC2"}
			],
			"NetworkInterfaces": [
			{
				"DeleteOnTermination": "true",
				"Description": "Primary network interface",
				"DeviceIndex": 0,
				"SubnetId": {
					"Ref": "Ec2SubnetId"
				},
			"GroupSet": [
            {
				"Ref": "Ec2SecurityGroup"
			}]
			}
			]
			}
		},
		
		"Ec2SecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
          "GroupDescription": "IDW Front End Ec2 Security Group",
			"VpcId": {
				"Ref": "Ec2VPC"
			},
			"Tags": [
			{
            "Key": "Name",
             "Value": {"Fn::Join" : ["-", [{"Ref" : "ApplicationName"},"Ec2SecurityGroup",{"Ref" : "EnvironmentType"}]]}


          },{"Key": "AWS Service","Value": "Security Group"}
			]
          }
        },
	 "InboundRule1Ec2": {
		"Type": "AWS::EC2::SecurityGroupIngress",
		"Properties": {
			"GroupId": {
				"Ref": "Ec2SecurityGroup"
			},
			"IpProtocol": "tcp",
			"FromPort": "3389",
			"ToPort": "3389",
			"CidrIp": { "Ref" : "Ec2RDP"}
		}
      },
	 "OutboundRuleJumpHost": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "Ec2SecurityGroup"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
     },
	
		"Ec2IPAddress" : {
			"Type" : "AWS::EC2::EIP"
		},

		"IPAssociation" : {
			"Type" : "AWS::EC2::EIPAssociation",
			"Properties" : {
				"InstanceId" : { "Ref" : "IDWFrontEndEc2" },
				"EIP" : { "Ref" : "Ec2IPAddress" }
			}
		},
        "IDWApiGatewayCloudWatchRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
				"RoleName" : "IDW-APIGateway-CloudWatch-Role",
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
                ]
            },
            "DependsOn": [
                "IDWApiMainStageLogGroup"
            ]
        },
        "IDWApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
                "CloudWatchRoleArn": {
                    "Fn::GetAtt": [
                        "IDWApiGatewayCloudWatchRole",
                        "Arn"
                    ]
                }
            }
        },
        "IDWApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": {"Fn::Join" : ["-", [{"Ref": "IDWApiName"},{"Ref" : "EnvironmentType"}]]},
                "Description": "An IDW REST API"
            }
        },
        "IDWApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "RestApiId": {
                    "Ref": "IDWApi"
                }	
            },
            "DependsOn": [
                "IDWApiMethod1","IDWApiMethod2","IDWApiMethod3"
            ]
        },
        "IDWApiMainStageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "IDW-API-Gateway-Execution-Logs_IDW/${EnvironmentType}/${IDWApiStageName}",
                        {
                            "StageName": {
                                 "Ref" : "IDWApiStageName"
                            },
							"Environment":{"Ref" : "EnvironmentType"}
                        }
                    ]
                }
            }
        },
        "IDWApiStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "IDWApiDeployment"
                },
                "MethodSettings": [
                    {
                        "ResourcePath": "",
                        "HttpMethod": "*/*",
                        "DataTraceEnabled": true,
                        "LoggingLevel": "INFO",
                        "MetricsEnabled": false
                    }
                ],
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "StageName": {
                     "Ref" : "IDWApiStageName"
                }
            },
            "DependsOn": [
                "IDWApiMainStageLogGroup"
            ]
        },
         
        "IDWApiResource1": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "IDWApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": {"Ref": "IDWApiResourceName1"},
                "RestApiId": {
                    "Ref": "IDWApi"
                }
            }
        },
		 "IDWApiResource2": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "IDWApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": {"Ref": "IDWApiResourceName2"},
                "RestApiId": {
                    "Ref": "IDWApi"
                }
            }
        },
		 "IDWApiResource3": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "ParentId": {
                    "Fn::GetAtt": [
                        "IDWApi",
                        "RootResourceId"
                    ]
                },
                "PathPart": {"Ref": "IDWApiResourceName3"},
                "RestApiId": {
                    "Ref": "IDWApi"
                }
            }
        },
        "IDWLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "idwstore_idwService",
                "Handler": "index.handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "IDWLambdaIAMFunctionRole",
                        "Arn"
                    ]
                },
				"FunctionName" : {"Fn::Join" : ["-", [{"Ref" : "LambdaFunctionName"},{"Ref" : "EnvironmentType"}]]},
                "Code": {"ZipFile":{ "Fn::Join": ["", [ "Please Upload your Lambda Code"]]}},
				"VpcConfig" : { "SecurityGroupIds" : [{"Ref" : "LambdaSecurityGroup"}],"SubnetIds" : {"Ref":"LambdaSubnetIds"} },
                "Runtime": "nodejs6.10",
                "Timeout": "300",
				"Tags": [
			{"Key": "AWS Service","Value": "Lambda"}
        ]
            }
        },
		"LambdaSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"VpcId" : {
					"Ref" : "LambdaVPC"
				},
				"Tags": [
						{"Key": "AWS Service","Value": "Security Group"},{"Key": "Name","Value": {"Fn::Join" : ["-", ["IDWLambdaSecurityGroup",{"Ref" : "EnvironmentType"}]]}}
        ],
				"GroupDescription" : "Lambda SecurityGroup"
			}
		},
	 "InboundRule1LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "LambdaSecurityGroup"
        },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
       "SourceSecurityGroupId" : { "Ref" : "LambdaSecurityGroup" }

      }
     },
        "IDWLambdaIAMFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
				"RoleName" : {"Fn::Join" : ["-", ["IDW-Lambda-Role",{"Ref" : "EnvironmentType"}]]},
                "Path": "/"
            }
        },
        "IDWLambdaFunctionPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join" : ["-", ["IDWLambdaFunctionPolicy",{"Ref" : "EnvironmentType"}]]},
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
								"logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
								"logs:PutLogEvents",
								"ec2:CreateNetworkInterface",
								"ec2:DescribeNetworkInterfaces",
								"ec2:DeleteNetworkInterface"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IDWLambdaIAMFunctionRole"
                    }
                ]
            }
        },
        "IDWLambdaFunctionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "/aws/lambda/${LambdaFunctionName}/${EnvironmentType}"
                }
            }
        },
		"IDWOPTIONS1": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
            "ResourceId": {
                "Ref": "IDWApiResource1"
            },
            "RestApiId": {
                "Ref": "IDWApi"
            },
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "Integration": {
                "Type": "MOCK",
                "IntegrationResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        },
                        "StatusCode": "200"
                    }
                ],
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                }
            },
            "MethodResponses": [
                {
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "StatusCode": "200"
                }
            ]
        }
    },
        "IDWApiMethod1": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "ResourceId": {
                    "Ref": "IDWApiResource1"
                },
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "HttpMethod": {"Ref" :"HttpMethod1"},
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "SelectionPattern": ""
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
					
	
  				
								"RequestTemplates": {
										"application/json" : "{\n   \"body\" : $input.json('$'),\n   \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n     \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n     #end\n    },\n    \"method\": \"$context.httpMethod\",\n   \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n     #end\n   },\n   \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n     #end\n   }\n }"
												},
                    "Type": "AWS",
                     "Uri": {"Fn::Join" : ["", 
					  ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["IDWLambdaFunction", "Arn"]}, "/invocations"]
				   ]}
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    }
                ]
            },
            "DependsOn": [
                "IDWApiMethodLambdaPermission"
            ]
        },
		"IDWOPTIONS2": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
            "ResourceId": {
                "Ref": "IDWApiResource2"
            },
            "RestApiId": {
                "Ref": "IDWApi"
            },
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "Integration": {
                "Type": "MOCK",
                "IntegrationResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        },
                        "StatusCode": "200"
                    }
                ],
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                }
            },
            "MethodResponses": [
                {
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "StatusCode": "200"
                }
            ]
        }
    },
        "IDWApiMethod2": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "ResourceId": {
                    "Ref": "IDWApiResource2"
                },
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "HttpMethod": {
                    "Ref" :"HttpMethod2"
                },
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "SelectionPattern": ""
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
					
	
  				
								"RequestTemplates": {
										"application/json" : "{\n  \"body\" : $input.json('$'),\n   \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n     \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n     #end\n    },\n    \"method\": \"$context.httpMethod\",\n   \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n     #end\n   },\n   \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n     #end\n   }\n }"
												},
                    "Type": "AWS",
                    "Uri": {"Fn::Join" : ["", 
					  ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["IDWLambdaFunction", "Arn"]}, "/invocations"]
				   ]}
                    
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    }
                ]
            },
            "DependsOn": [
                "IDWApiMethodLambdaPermission"
            ]
        },
		"IDWOPTIONS3": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
            "ResourceId": {
                "Ref": "IDWApiResource3"
            },
            "RestApiId": {
                "Ref": "IDWApi"
            },
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "Integration": {
                "Type": "MOCK",
                "IntegrationResponses": [
                    {
                        "ResponseParameters": {
                            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                            "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
                            "method.response.header.Access-Control-Allow-Origin": "'*'"
                        },
                        "ResponseTemplates": {
                            "application/json": ""
                        },
                        "StatusCode": "200"
                    }
                ],
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                }
            },
            "MethodResponses": [
                {
                    "ResponseModels": {
                        "application/json": "Empty"
                    },
                    "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Headers": true,
                        "method.response.header.Access-Control-Allow-Methods": true,
                        "method.response.header.Access-Control-Allow-Origin": true
                    },
                    "StatusCode": "200"
                }
            ]
        }
    },
        "IDWApiMethod3": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "AuthorizationType": "AWS_IAM",
                "ResourceId": {
                    "Ref": "IDWApiResource3"
                },
                "RestApiId": {
                    "Ref": "IDWApi"
                },
                "HttpMethod": {
                    "Ref" :"HttpMethod3"
                },
                "Integration": {
                    "IntegrationHttpMethod": "POST",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "SelectionPattern": ""
                        }
                    ],
                    "PassthroughBehavior": "WHEN_NO_TEMPLATES",
					
	
  				
								"RequestTemplates": {
										"application/json" : "{\n  \"body\" : $input.json('$'),\n   \"headers\": {\n    #foreach($header in $input.params().header.keySet())\n     \"$header\": \"$util.escapeJavaScript($input.params().header.get($header))\" #if($foreach.hasNext),#end\n\n     #end\n    },\n    \"method\": \"$context.httpMethod\",\n   \"params\": {\n    #foreach($param in $input.params().path.keySet())\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\n\n     #end\n   },\n   \"query\": {\n    #foreach($queryParam in $input.params().querystring.keySet())\n    \"$queryParam\": \"$util.escapeJavaScript($input.params().querystring.get($queryParam))\" #if($foreach.hasNext),#end\n\n     #end\n   }\n }"
												},
                    "Type": "AWS",
                     "Uri": {"Fn::Join" : ["", 
					  ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["IDWLambdaFunction", "Arn"]}, "/invocations"]
				   ]}
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    }
                ]
            },
            "DependsOn": [
                "IDWApiMethodLambdaPermission"
            ]
        },	
        "IDWApiMethodLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {"Fn::GetAtt": ["IDWLambdaFunction", "Arn"]},
                "Principal": "apigateway.amazonaws.com",
				"SourceArn": {"Fn::Join": ["", 
                          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "IDWApi"}, "/*"]
                      ]}
            },
            "DependsOn": [
                "IDWLambdaFunctionLogGroup"
            ]
        }
    },
    "Outputs": {
        "IDWApiEndpoint1": {"Value": {"Fn::Sub": "https://${IDWApi}.execute-api.${AWS::Region}.amazonaws.com/${IDWApiStage}/holdings/"}},
		"IDWApiEndpoint2": {"Value": {"Fn::Sub": "https://${IDWApi}.execute-api.${AWS::Region}.amazonaws.com/${IDWApiStage}/indexvalues/"}},
		"IDWApiEndpoint3": {"Value": {"Fn::Sub": "https://${IDWApi}.execute-api.${AWS::Region}.amazonaws.com/${IDWApiStage}/returns/"}}
			}
      }